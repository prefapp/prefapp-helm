"use strict";(self.webpackChunkprefapp_helm=self.webpackChunkprefapp_helm||[]).push([[935],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(n),u=l,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9936:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),o=["components"],i={title:"Quick Overview"},p=void 0,s={type:"mdx",permalink:"/overview",source:"@site/src/pages/overview.md"},d=[{value:"Motivation",id:"motivation",children:[],level:2},{value:"To install",id:"to-install",children:[],level:2},{value:"Hello World",id:"hello-world",children:[],level:2},{value:"Renders",id:"renders",children:[],level:2},{value:"Data blocks",id:"data-blocks",children:[{value:"Overridable data blocks",id:"overridable-data-blocks",children:[],level:3},{value:"The <code>_dict</code>  syntax",id:"the-_dict--syntax",children:[],level:3},{value:"The override helper",id:"the-override-helper",children:[{value:"Override augmenters",id:"override-augmenters",children:[],level:4}],level:3}],level:2},{value:"StatefulSets",id:"statefulsets",children:[{value:"Template",id:"template",children:[],level:3}],level:2}],m={toc:d};function c(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"Helm is helpful tool for creating and mantaining kubernetes templates and releases. "),(0,r.kt)("p",null,"The problem with helm is that reusability is really hard to obtain. Somehow, this has been addressed in the ",(0,r.kt)("a",{parentName:"p",href:"https://helm.sh/blog/helm-3-released/"},"v3")," with the consolidation of two basic features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://helm.sh/docs/chart_template_guide/subcharts_and_globals/"},"subcharts"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://helm.sh/docs/topics/library_charts/"},"library charts"),".")),(0,r.kt)("p",null,"By using the library chart feature, it is possible to create a set of fundamentals that avoid repetition in the implementation of helm charts. "),(0,r.kt)("p",null,"Those fundamentals are the core of the prefapp-helm microframework. "),(0,r.kt)("p",null,"prefapp-helm is implemented as a library chart to be used on application charts as the basic renders for Kubernetes artifacts. "),(0,r.kt)("p",null,"It has two more advanced features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An overload method"),(0,r.kt)("li",{parentName:"ul"},"A stash.")),(0,r.kt)("h2",{id:"to-install"},"To install"),(0,r.kt)("p",null,"Add the prefapp-helm repo to your helm repos. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"helm repo add prefapp-helm https://prefapp.github.io/prefapp-helm\nhelm repo update\n")),(0,r.kt)("p",null,"Then, include in your charts as a dependency:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# Chart.yaml\n\ndependencies:\n  # ... your other dependencies\n  - name: prefapp-helm\n    version: <your desired version>\n    repository: https://prefapp.github.io/prefapp-helm\n")),(0,r.kt)("h2",{id:"hello-world"},"Hello World"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a chart whit ",(0,r.kt)("strong",{parentName:"li"},"helm")," command.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd /<my_route> && \\\nhelm create ph-hello-world\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clean chart placeholders")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd ph-hello-world && \\\nrm -rf templates/* charts && \\\ncat /dev/null > values.yaml\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add prefapp-helm dependencia in Chart.yaml file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF > Chart.yaml\napiVersion: v2\nname: hello-prefapp-helm\ndescription: A chart with prefapp-helm microframework\ntype: application\nversion: 0.1.0\nappVersion: "1.16.0"\ndependencies:\n  - name: prefapp-helm\n    version: 0.0.18\n    repository: https://prefapp.github.io/prefapp-helm\nEOF\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Helm depencency update")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm dep update\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create our first template")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF > templates/my_firt_template_with_preffapp_helm.yaml\n{{- define "my.pod.data" -}}\nname: "my-pod"\ncontainers:\n  - name: app\n    image: ubuntu:20.04\n{{- end -}}\n{{ include "ph.pod.render" (include "my.pod.data" . | fromYaml ) }}\nEOF\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Template")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm template . -s templates/my_firt_template_with_preffapp_helm.yaml\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Tip: Sometimes prefapp-helm returns an output with some blank lines. To repair it, you can create an alias and add it to the end of the helm command.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Alias dbl (DeleteBlankLines)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"dbl='|grep --color=never \"\\S\"'\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm template . -s templates/my_firt_template_with_preffapp_helm.yaml dbl\n")),(0,r.kt)("h2",{id:"renders"},"Renders"),(0,r.kt)("p",null,"Renders are chart helpers that receive an object and produce a standard k8s artifact. "),(0,r.kt)("p",null,"For instance, a minimal pod using a prefapp-helm render could be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'\n{{- define "my.pod.data" -}}\n\nname: "my-pod"\n\ncontainers:\n  - name: app\n    image: debian:10\n\n{{- end -}}\n\n{{ include "ph.pod.render" (include "my.pod.data" . | fromYaml ) }}\n\n')),(0,r.kt)("p",null,"The result will be a pod conforming to the kubernetes API where the release is going to be installed. "),(0,r.kt)("p",null,"The render used in the example is the ",(0,r.kt)("strong",{parentName:"p"},"pod render")," that receives an object we create on the data section. "),(0,r.kt)("p",null,"The last part of the final statement is what creates that object (using the fromYaml method) and passes it to the render. "),(0,r.kt)("p",null,"This idea of creating data sections that are passed to the renders have important advantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Avoidance of hardcoding the artifact structure. "),(0,r.kt)("li",{parentName:"ul"},"Possibility of embedding block sections of the values directly on the data section. "),(0,r.kt)("li",{parentName:"ul"},"Ease of debug. ")),(0,r.kt)("h2",{id:"data-blocks"},"Data blocks"),(0,r.kt)("h3",{id:"overridable-data-blocks"},"Overridable data blocks"),(0,r.kt)("p",null,"Dictionary merges are possible on helm templates. "),(0,r.kt)("p",null,"One of the biggest problems with the merge is that list merges are not available. "),(0,r.kt)("p",null,"Therefore:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"\n--- \n# data a\ncontainers:\n  - name: foo\n    image: my-image:foo\n    \n\n---\n# data b\ncontainers:\n  - name: foo\n    image: my-image:foo2\n")),(0,r.kt)("p",null,"Those two data sets are not mergeable, producing a result that is not the expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"\n\n")),(0,r.kt)("p",null,"One of the ideas that could be really helpful on data blocks is the ability to override them with new characteristics. "),(0,r.kt)("p",null,"Thus, with the overridable idea We could achieve something similar to a class inheritance. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'\n{{ define "pod.data" }}\n\nname: foo\n\ncontainers:\n  - name: app\n    image: foo.com/image:r0\n    ports:\n      - pod: 8080\n\n{{ end }}\n\n{{ define "pod.data.override" }}\n\ncontainers:\n  - command: ["tail", "-f", "/dev/null"]\n\n{{ end }}\n\n\n')),(0,r.kt)("p",null,"But, due to the impossibility of having list merges, the proper combination of the two data blocks is not possible. "),(0,r.kt)("p",null,"Therefore our proposal is extend the renders definitions with the new ",(0,r.kt)("inlineCode",{parentName:"p"},"_dict")," syntax. "),(0,r.kt)("h3",{id:"the-_dict--syntax"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"_dict"),"  syntax"),(0,r.kt)("p",null,"The basic idea is to extend the list fields of Kubernetes's machinery with a ",(0,r.kt)("inlineCode",{parentName:"p"},"_dict")," extension. "),(0,r.kt)("p",null,"Thus, "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\n# pod definition\n\ncontainers:\n  - name: a\n  - name: b\n\n# dict definition\n\ncontainers_dict:\n  a:\n    name: a\n  b: \n    name: b\n\n")),(0,r.kt)("p",null,"Of course, the proper render will convert  ",(0,r.kt)("inlineCode",{parentName:"p"},"_dict")," extensions to regular list fields. "),(0,r.kt)("p",null,"By using this approach, data blocks are mergeable ",(0,r.kt)("strong",{parentName:"p"},"before")," being render. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'\n{{ define "pod.data" }}\n\nname: my-pod\n\ncontainers_dict:\n  app:\n    name: app\n    image: my-image:r-0\n    ports:\n    - pod: 8080\n\n{{ end }}\n\n{{ define "pod.data.override" }}\n\ncontainers_dict:\n  app:\n    command: ["tail", "-f", "/dev/null"]  # overrides the app container definition adding the command\n\n{{ end }}\n\n\n# now render the normal pod with the override data block\n{{ include "ph.pod.render" {{ include "ph.override" (list "pod.data.override" . ) }}\n\n')),(0,r.kt)("p",null,"We obtain the expected result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n    - name: app\n      image: my-image:r-0\n      command: ["tail", "-f", "/dev/null"] \n      ports:\n        - containerPort: 80\n\n')),(0,r.kt)("p",null,"The following keys are overridable by prefapp-helm's renderers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"containers"),(0,r.kt)("li",{parentName:"ul"},"init_containers"),(0,r.kt)("li",{parentName:"ul"},"volumes"),(0,r.kt)("li",{parentName:"ul"},"volumeMounts")),(0,r.kt)("h3",{id:"the-override-helper"},"The override helper"),(0,r.kt)("p",null,'The "ph.override" method allows a data block to override another by merging both, giving preference to the first one. '),(0,r.kt)("p",null,"It accepts two params:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The name of the override data block"),(0,r.kt)("li",{parentName:"ul"},"A context")),(0,r.kt)("p",null,"To determine the parent data block name, override uses a simple method: it takes out the last section of the name (separated by a dot), and prefixed with a '@'.  "),(0,r.kt)("p",null,"Therefore:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"pod.data.@override => pod.data (parent block)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"deployment.foo.@my_override => deployment.foo (parent block)"))),(0,r.kt)("p",null,"This inherintance can be as complex as needed by the charts. "),(0,r.kt)("p",null,"Thus,"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a.@b.@c => resolves a -> b -> c")),(0,r.kt)("p",null,"Those blocks will be merged with a precedence from right to left. "),(0,r.kt)("h4",{id:"override-augmenters"},"Override augmenters"),(0,r.kt)("p",null,"A) The .final keyword"),(0,r.kt)("p",null,"Whenever we want to finalize a block of code, which means our version is the only one not the inherit block, we can use the .final keyword, like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'\n{{- define "parent.block" -}}\n\nfoo:\n  a: 1\n  b: 2\n\n{{- end -}}\n\n{{- define "parent.block.@child" -}}\n\nfoo.final: # this version is final thus the precedent version of the parent is ignored\n  c: 3\n\n{{- end -}}\n\n{{ include "ph.override" (list "parent.block.@child" . ) }}\n\n---\n# output\nfoo:\n  c: 3\n\n\n')),(0,r.kt)("h1",{id:"recipes"},"Recipes"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Place for use example exhibition.")),(0,r.kt)("h2",{id:"statefulsets"},"StatefulSets"),(0,r.kt)("h3",{id:"template"},"Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'{{- define "foo.statefulset.render" }}\n\nname: {{ .Release.name }}\n\nselector: {{ .Values.selector | toYaml | nindent 2 }}\n\nlabels: {{ .Values.labels | toYaml | nindent 2 }}\n\nserviceName: {{ .Values.serviceName }}\n\nreplicas: {{ .Values.replicas }}\n\ncontainers_dict:\n  app:\n    image: {{ .Values.image }}\n\nvolumeClaimTemplates: {{ .Values.volumeClaimTemplates | toYaml | nindent 2 }}\n\n{{- end -}}\n')),(0,r.kt)("hr",null))}c.isMDXComponent=!0}}]);