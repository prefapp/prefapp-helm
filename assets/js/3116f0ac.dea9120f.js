"use strict";(self.webpackChunkprefapp_helm=self.webpackChunkprefapp_helm||[]).push([[750],{3905:function(e,r,n){n.d(r,{Zo:function(){return p},kt:function(){return d}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),c=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=c(e.components);return t.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return n?t.createElement(f,s(s({ref:r},p),{},{components:n})):t.createElement(f,s({ref:r},p))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},568:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var t=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],l={sidebar_position:4},i=void 0,c={unversionedId:"renders/service",id:"renders/service",isDocsHomePage:!1,title:"service",description:"Basic structure",source:"@site/docs/renders/service.md",sourceDirName:"renders",slug:"/renders/service",permalink:"/docs/renders/service",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/renders/service.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"env helpers",permalink:"/docs/renders/env_helpers"},next:{title:"configmap",permalink:"/docs/renders/configmap"}},p=[{value:"Basic structure",id:"basic-structure",children:[],level:2},{value:"Example of ph.service.render",id:"example-of-phservicerender",children:[],level:2}],u={toc:p};function m(e){var r=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"basic-structure"},"Basic structure"),(0,o.kt)("p",null,"To render our Kubernetes services, Prefapp-helm uses ",(0,o.kt)("inlineCode",{parentName:"p"},"ph.service.render"),", which expects the following object structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: <name_of_the_deployment>\nselector:  <selectors>\n\nports: \n  - service: 80 #exposed port\n    pod: 80 #target\n")),(0,o.kt)("p",null,"Prefapp-helm-render uses the same nomenclature as the standard k8s artifact, with the exception of the ",(0,o.kt)("em",{parentName:"p"},"ports"),", this allows us to use the same ",(0,o.kt)("em",{parentName:"p"},"Values")," declaration for both the service and the deployment. "),(0,o.kt)("p",null,"Given this ",(0,o.kt)("inlineCode",{parentName:"p"},"values.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"#values.yaml\nfrontend_ports:\n  - service: 80 #exposed port\n    pod: 80  #target\n")),(0,o.kt)("p",null,"We can have the same line in the service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"#service.yaml\nname: service-{{ .Release.Name }}-php\nselector:  {{ .Values.selector_meiga | toYaml | nindent 2}}\n  \nports: {{ .Values.frontend_ports | toYaml | nindent 6 }}\n")),(0,o.kt)("p",null,"As well as the deployment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"#deploy.yaml\nname: deploy-{{ .Release.Name }}-php\nselector: {{ .Values.selector_meiga | toYaml | nindent 2}}\n\ncontainers:\n- name: app-php\n  ...\n  ports: {{ .Values.frontend_ports | toYaml | nindent 6 }}\n")),(0,o.kt)("h2",{id:"example-of-phservicerender"},"Example of ph.service.render"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{{ define "frontend.service.data"  }}\nname: servizo-{{ .Release.Name }}-php\nselector:  {{ .Values.selector_meiga | toYaml | nindent 2}}\n  \nports: {{ .Values.ports | toYaml | nindent 6 }}\n\n{{- end }}\n{{ include "ph.service.render" (include "frontend.service.data" . | fromYaml )  }}\n')))}m.isMDXComponent=!0}}]);