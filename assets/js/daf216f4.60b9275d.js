"use strict";(self.webpackChunkprefapp_helm=self.webpackChunkprefapp_helm||[]).push([[941],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return m}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return r?t.createElement(f,i(i({ref:n},s),{},{components:r})):t.createElement(f,i({ref:n},s))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1262:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return u}});var t=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={sidebar_position:1,sidebar_label:"Introduction"},p="Introduction",c={unversionedId:"renders/renders_intro",id:"renders/renders_intro",isDocsHomePage:!1,title:"Introduction",description:"Renders are chart helpers that receive an object and produce the appropriate standard k8s artifact. Instead of writing the hole Kubernetes structure for each artifact, prefapp-helm allows the programer to create simpler object defining the artifacts and apply a specific render to inflate our yaml and create a standard k8s artifact conforming to the kubernetes API of the release environment.",source:"@site/docs/renders/renders_intro.md",sourceDirName:"renders",slug:"/renders/renders_intro",permalink:"/docs/renders/renders_intro",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/renders/renders_intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Introduction"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"deployment",permalink:"/docs/renders/deployment"}},s=[{value:"Example",id:"example",children:[],level:2},{value:"Available renders",id:"available-renders",children:[],level:2}],d={toc:s};function u(e){var n=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Renders are chart helpers that receive an object and produce the appropriate standard k8s artifact. Instead of writing the hole Kubernetes structure for each artifact, prefapp-helm allows the programer to create simpler object defining the artifacts and apply a specific render to ",(0,o.kt)("em",{parentName:"p"},"inflate")," our yaml and create a standard k8s artifact conforming to the kubernetes API of the release environment."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Here is an example of a minimal deploy using Prefapp-helm render:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{{- define "my.deploy.data" -}}\nname: mydeploy\nselector:\n  app: nginx-app\n\ncontainers:\n- name: nginx\n  image: nginx:1.19.6\n{{- end -}}\n\n{{ include "ph.deployment.render" (include "my.deploy.data" . | fromYaml ) }}\n')),(0,o.kt)("p",null,"Whose rendered information would be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: Deployment\napiVersion: apps/v1\n\nmetadata:\n  name: mydeploy\n  labels:\n  annotations:\n\nspec:\n  replicas: 1\n  selector: \n    matchLabels: \n      app: nginx-app\n  template: \n    metadata:\n      labels: \n        app: nginx-app\n      annotations:\n    spec: \n      containers: \n          - name: nginx\n            image: "nginx:1.19.6"\n            imagePullPolicy: IfNotPresent\n            env: \n            envFrom:    \n            ports: \n            volumeMounts: \n            resources: \n              requests: \n                  {}\n              limits: \n                  {} \n      imagePullSecrets: \n      volumes:\n')),(0,o.kt)("h2",{id:"available-renders"},"Available renders"),(0,o.kt)("p",null,"There is a different render for each of the kubernetes artifact: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"configmap"},"ph.configmap.render")),(0,o.kt)("li",{parentName:"ul"},"ph.cronjob.render"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"deployment"},"ph.deployment.render")),(0,o.kt)("li",{parentName:"ul"},"ph.ingress.render"),(0,o.kt)("li",{parentName:"ul"},"ph.job.render"),(0,o.kt)("li",{parentName:"ul"},"ph.pod.render"),(0,o.kt)("li",{parentName:"ul"},"ph.pvc.render"),(0,o.kt)("li",{parentName:"ul"},"ph.secret.render"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"service"},"ph.service.render"))),(0,o.kt)("h1",{id:"structure"},"Structure"),(0,o.kt)("p",null,"The prefapp-helm-render expects an object with the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#metadata\nname:\nlabels:\nanotations:\n...\n\n#selector\nselector: \n\n#artifact-specific object\nports: #service\ncontainers: #deployment\ndata: #configmap\n...\n")),(0,o.kt)("p",null,"The objects use the standard kubernetes nomenclature, although there are a few exceptions."))}u.isMDXComponent=!0}}]);